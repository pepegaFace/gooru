# Generated by Django 3.2.9 on 2022-07-21 08:04

import datetime
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gooru.managers
import gooru.validators
import multiselectfield.db.fields
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('deleted_on', models.DateTimeField(blank=True, null=True)),
                ('email', models.EmailField(default=None, error_messages={'unique': 'A user with that email address already exists.'}, help_text='Required', max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(default=None, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('password', models.CharField(default=None, max_length=128, verbose_name='password')),
                ('role', models.CharField(choices=[('DefaultUser', 'Пользователь'), ('Manager', 'Менеджер'), ('AdminCRM', 'Администратор')], default='DefaultUser', max_length=15)),
                ('phone_number', models.CharField(default='+77777777777', help_text='Required', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone number')),
                ('avatar', models.ImageField(blank=True, default='avatar.png', null=True, upload_to=users.models.avatar_directory_path, validators=[gooru.validators.image_restriction], verbose_name='Avatar')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', gooru.managers.SoftDeleteUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brief',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_status', models.SmallIntegerField(choices=[(1, 'Физическое лицо'), (2, 'Самозанятый'), (3, 'Индивидуальный предприниматель'), (4, 'Общество с ограниченной ответственностью'), (5, 'Свой вариант')])),
                ('client_status_self_option', models.TextField(blank=True, default='', null=True)),
                ('fields_of_activity', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Информационные системы'), (2, 'Маркетинг, реклама'), (3, 'Торговля'), (4, 'Обучение, преподавание'), (5, 'Свой вариант')], max_length=9)),
                ('fields_of_activity_self_option', models.TextField(blank=True, default='', null=True)),
                ('site_types', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Интернет-магазин'), (2, 'Маркетплейс'), (3, 'Доска объявлений'), (4, 'Новостной сайт'), (5, 'Социальная сеть'), (5, 'Свой вариант')], max_length=11)),
                ('site_types_self_option', models.TextField(blank=True, default='', null=True)),
                ('additional_options', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Парсинг с авторизацией'), (2, 'Разбивка всех характеристик в отдельный столбец'), (3, 'Дополнительные столбцы данных'), (4, 'Настроить файл экспорта в вашу CMS'), (5, 'Вариативные товары'), (6, 'Скачивание до 5 изображений одного товара')], max_length=11)),
                ('number_of_position_min', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100000), django.core.validators.MinValueValidator(100)])),
                ('number_of_position_max', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100000), django.core.validators.MinValueValidator(100)])),
                ('source_amount', models.SmallIntegerField(choices=[(1, 'От 1 до 3 сайтов, до 5 страниц'), (2, 'От 1 до 10 сайтов, до 15 страниц'), (3, 'От 1 до 10 сайтов, до 15 страниц, с выгрузкой в соцсети'), (4, 'Свыше 10 сайтов, свыше 15 страниц, особые условия')])),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Parser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=450, unique=True, verbose_name='URL ссылка')),
                ('title', models.TextField(max_length=450, verbose_name='Заголовок')),
                ('article', models.TextField(verbose_name='Текст статьи')),
            ],
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.PositiveIntegerField(help_text='Required', verbose_name='Cost')),
                ('name', models.CharField(help_text='Required', max_length=200, verbose_name='Name')),
                ('description', models.CharField(help_text='Required', max_length=300, verbose_name='Discription')),
            ],
        ),
        migrations.CreateModel(
            name='TokenUid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=350, verbose_name='Token')),
                ('uid', models.CharField(max_length=10, verbose_name='Uid')),
            ],
        ),
        migrations.CreateModel(
            name='UserTariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created')),
                ('finish_date', models.DateField(default=datetime.datetime(2022, 8, 20, 11, 4, 13, 874972), verbose_name='Finish date')),
                ('status', models.CharField(default='payment.waiting_for_capture', max_length=50, verbose_name='Status')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('payment_id', models.CharField(max_length=150, verbose_name='Payment')),
                ('tariff', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tariff', to='users.tariff')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usertariff', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required', max_length=150, verbose_name='Name')),
                ('phone_number', models.CharField(help_text='Required', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone number')),
                ('email', models.EmailField(help_text='Required', max_length=255, verbose_name='Email address')),
                ('topic_type', models.PositiveSmallIntegerField(choices=[(1, 'Вопрос по моим парсерам'), (2, 'Вопрос к менеджеру'), (3, 'Вопрос по оплате'), (4, 'Вопрос по новому заказу'), (5, 'Обращение в службу безопасности'), (6, 'Предложение о сотрудничестве'), (7, 'Сообщить об ошибке на сайте'), (8, 'Другое')], default=1)),
                ('message', models.CharField(default=None, help_text='Required', max_length=1500, verbose_name='Message')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'В процессе'), (2, 'Закрыт'), (3, 'Отложен')], default=1)),
                ('parser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.parser')),
                ('user', models.ForeignKey(blank=True, help_text='Required', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Parsource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='my new parser', help_text='Required', max_length=30, verbose_name='Parser name')),
                ('data_source', models.TextField(default='yandex.ru', help_text='Required', max_length=1000, verbose_name='Data url')),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('condition', models.CharField(choices=[('Process', 'Открыто'), ('Ready', 'Закрыто'), ('Pending', 'Отложен')], default='Process', max_length=18)),
                ('find', models.CharField(default='Не найден', help_text='Required', max_length=17)),
                ('lost_time', models.TimeField(auto_now_add=True)),
                ('description', models.TextField(verbose_name='Основные требования')),
                ('parse_fields', models.TextField(verbose_name='Необходимые поля')),
                ('url_detail', models.TextField(blank=True, null=True, verbose_name='Url на страницу с деталями')),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to=users.models.screenshot_directory_path, validators=[gooru.validators.image_restriction], verbose_name='Скриншот')),
                ('is_view', models.BooleanField(blank=True, default=False, verbose_name='Просмотрено')),
                ('inactive', models.BooleanField(blank=True, default=False, verbose_name='Удалено')),
                ('deleted_on', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='parser',
            name='parsource',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.parsource'),
        ),
        migrations.CreateModel(
            name='Notify',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('checked', models.BooleanField(default=False, verbose_name='Просмотрено')),
                ('date_checked', models.DateTimeField(blank=True, null=True, verbose_name='Время просмотра')),
                ('message', models.CharField(help_text='Required', max_length=200, verbose_name='Текст уведомления')),
                ('url', models.URLField(help_text='Required', max_length=100, verbose_name='Ссылка на событие')),
                ('user', models.ForeignKey(help_text='Required', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('comment', models.CharField(blank=True, max_length=300, verbose_name='Comment')),
                ('parser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='users.parser')),
            ],
        ),
        migrations.CreateModel(
            name='UserManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'unique_together': {('user', 'manager')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parser', models.ForeignKey(help_text='Required', on_delete=django.db.models.deletion.CASCADE, to='users.parser')),
                ('user', models.ForeignKey(help_text='Required', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'parser')},
            },
        ),
    ]
