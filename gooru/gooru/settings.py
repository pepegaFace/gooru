"""
Django settings for gooru project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import users
import gooru


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

HOSTNAME = r"http://localhost:8003"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
# MY PROJECT PATHS
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))


FILE_PATH_FIELD_DIRECTORY = f'{PROJECT_ROOT}/images'   # vhs
CRON_LOGS_PATH_FIELD_DIRECTORY = f'{PROJECT_ROOT}/logs'

load_dotenv(f'{Path(PROJECT_ROOT).parent}/.env.dev')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(' ')


# Application definition

INSTALLED_APPS = [
    'rest_framework.authtoken',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gooru',
    'users',
    'chats',
    'rest_framework',
    'rest_framework_api_key',
    'corsheaders',
    'drf_yasg',
    'djoser',
    'django_crontab',
    'django_filters',
    'django_excel',
    'multiselectfield',
    'channels',
    'pysendpulse',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gooru.urls'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gooru.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_USER_MODEL = 'users.User'
"""
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
"""
AUTH_PWD_MODULE = "django.contrib.auth.password_validation."

AUTH_PASSWORD_VALIDATORS = [{
      "NAME": f"{AUTH_PWD_MODULE}UserAttributeSimilarityValidator",
   },
   {
      "NAME": f"{AUTH_PWD_MODULE}MinimumLengthValidator",
   },
   {
      "NAME": f"{AUTH_PWD_MODULE}CommonPasswordValidator",
   },
   {
      "NAME": f"{AUTH_PWD_MODULE}NumericPasswordValidator",
   },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAdminUser',
        'rest_framework.permissions.IsAuthenticated',  # rest_framework.permissions.IsAuthenticated
        'rest_framework_api_key.permissions.HasAPIKey'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 1000000,
}

API_KEY_CUSTOM_HEADER = "HTTP_X_API_KEY"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
SENDPUlSE_REST_API_ID = os.environ.get('SENDPULSE_API_KEY')
SENDPUlSE_REST_API_SECRET = os.environ.get('SENDPUlSE_REST_API_SECRET')
DEFAULT_FROM_EMAIL = os.environ.get("EMAIL_FROM")
EMAIL_USE_TLS = True


DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '/user/verify/{uid}/{token}/email',
    'SEND_ACTIVATION_EMAIL': False,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': False,

    'SERIALIZERS': {
        # 'user': 'academ.serializers.MyUserSerializer',
        'current_user': 'users.serializers.MyUserSerializer',
        'user_delete': 'users.serializers.MyUserSerializer',
    },
    # 'SERIALIZERS': {},
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}


MEDIA_URL = '/images/'
MEDIA_ROOT = (
    os.path.join(BASE_DIR, 'images')
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    # 'handlers': {
    #     'file': {
    #         'level': 'DEBUG',
    #         'class': 'logging.FileHandler',
    #         'filename': f'{PROJECT_ROOT}/debug.log',
    #         'formatter': 'verbose'
    #     },
    # },
    # 'loggers': {
    #     'django': {
    #         'handlers': ['file'],
    #         'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
    #         'propagate': True,
    #     },
    # },
}


CRONJOBS = [
    ('25 12 * * *', 'chats.cron.message_notify', '>> /var/www/fastuser/data/www/gooru/gooru/logslogs/cronnotify.log/cronnotify.log'),
    ('30 12 * * *', 'chats.cron.manager_no_read_message', '>> /var/www/fastuser/data/www/gooru/gooru/logslogs/cronnotify.log/cronnotify.log'),
    ('35 12 * * *', 'users.cron.verify_notify', '>> /var/www/fastuser/data/www/gooru/gooru/logslogs/cronnotify.log/cronnotify.log'),
    ('40 12 * * *', 'users.cron.unread_parsource', '>> /var/www/fastuser/data/www/gooru/gooru/logslogs/cronnotify.log/cronnotify.log'),
]



ASGI_APPLICATION = 'gooru.asgi.application'
DJANGO_ALLOW_ASYNC_UNSAFE = True
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(os.environ.get("REDIS_HOST"), 
                        os.environ.get("REDIS_PORT"))]
        },
    },
}